#!/bin/sh
#
# Copyright (C) 2014, ThStack, Inc.
# Longgeek <longgeek@thstack.com>
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may
# not use this file except in compliance with the License. You may obtain
# a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations
# under the License.
#

RUNLEVEL=$(runlevel | awk '{print $2}')

[ -e /livestack/sources/nova ] > /dev/null && nova='nova'
[ -e /livestack/sources/glance ] > /dev/null && glance='glance'
[ -e /livestack/sources/horizon ] > /dev/null && horizon='httpd'
[ -e /livestack/sources/keystone ] > /dev/null && keystone='keystone'
[ -e /livestack/sources/neutron ] > /dev/null && neutron='neutron'
[ -e /livestack/sources/swift ] > /dev/null && swift='swift'
[ -e /livestack/sources/cinder ] > /dev/null && cinder='cinder'
[ -e /livestack/sources/ceilometer ] > /dev/null && ceilometer='ceilometer'
[ -e /livestack/sources/heat ] > /dev/null && heat='heat'
[ -e /livestack/sources/sahara ] > /dev/null && sahara='sahara'
[ -e /livestack/sources/trove ] > /dev/null && trove='trove'
dpkg -s mysql-server > /dev/null && mysql='mysql-server'
dpkg -s libvirt-bin > /dev/null && libvirtd='libvirt-bin'
dpkg -s openvswitch-switch > /dev/null && openvswitch='openvswitch-switch'
dpkg -s rabbitmq-server > /dev/null && rabbitmq='rabbitmq-server'
dpkg -s memcached > /dev/null && memcached='memcached'
dpkg -s tgt > /dev/null && targetd='targetd' || targetd='tgtd'

service_enabled() {
  if [ "$1" = 'mysql-server' ]; then
    [ -e /etc/rc$RUNLEVEL.d/S*mysql ]
  else
    [ -e /etc/rc$RUNLEVEL.d/S*$1 ]
  fi
}

lsb_to_string() {
  case $1 in
  0) echo "active" ;;
  1) echo "dead" ;;
  2) echo "dead" ;;
  3) echo "inactive" ;;
  *) echo "unknown" ;;
  esac
}

check_svc() {

  printf '%-40s' "$1:"

  bootstatus=$(service_enabled $1 && echo enabled || echo disabled)
  if [ "$1" = 'mysql-server' ]; then
    status=$(ps aux | grep mysqld | grep -v grep >/dev/null 2>/dev/null ; lsb_to_string $?)
  elif [ "$1" = 'rabbitmq-server' ]; then
    status=$(ps aux | grep rabbitmq | grep -v grep >/dev/null 2>/dev/null ; lsb_to_string $?)
  elif [ "$1" = 'openvswitch-switch' ]; then
    status=$(ps aux | grep ovs-vswitchd | grep -v grep >/dev/null 2>/dev/null ; lsb_to_string $?)
  elif [ "$1" = 'libvirt-bin' ]; then
    status=$(ps aux | grep `which libvirtd` | grep -v grep >/dev/null 2>/dev/null ; lsb_to_string $?)
  elif [ "$1" = 'puppet' ]; then
    status=$(ps aux | grep 'puppet agent' | grep -v grep >/dev/null 2>/dev/null ; lsb_to_string $?)
  elif [ "$1" = 'puppetmaster' ]; then
    status=$(ps aux | grep 'puppet master' | grep -v grep >/dev/null 2>/dev/null ; lsb_to_string $?)
  else
    status=$(ps aux | grep $1 | grep -v grep >/dev/null 2>/dev/null ; lsb_to_string $?)
  fi

  if [ "$bootstatus" = 'disabled' ]; then
    bootstatus='(disabled on boot)'
  else
    bootstatus=''
  fi

  test "$bootstatus" && status_pad=10 || status_pad=0

  printf "%-${status_pad}s%s\n" "$status" "$bootstatus"
}


if test "$nova"; then
  printf "== Nova services ==\n"
  for svc in api cert compute scheduler conductor consoleauth novncproxy objectstore spicehtml5proxy xvpvncproxy; do check_svc "nova-$svc"; done
fi

if test "$glance"; then
  printf "== Glance services ==\n"
  for svc in api registry; do check_svc "glance-$svc"; done
fi

if test "$keystone"; then
  printf "== Keystone service ==\n"
  for svc in $keystone; do check_svc "$svc"; done
fi

if test "$horizon"; then
  printf "== Horizon service ==\n"
  horizon_status="$(curl -s -w '%{http_code}\n' http://localhost/ -o /dev/null)"
  [ "$horizon_status" = 200 ] && horizon_status=active
  printf '%-40s%s\n' "horizon:" "$horizon_status"
fi

if test "$neutron"; then
  printf "== $neutron services ==\n"
  for svc in $neutron-server; do check_svc "$svc"; done
  # Default agents
  for agent in dhcp l3 metadata lbaas openvswitch vpn metering; do
    check_svc "$neutron-$agent-agent"
  done
fi

if test "$swift"; then
  printf "== Swift services ==\n"
  check_svc swift-proxy-server
  for ringtype in account container object; do
    check_svc swift-$ringtype-server
  done
fi

if test "$cinder"; then
  printf "== Cinder services ==\n"
  for service in api scheduler volume $backup; do
    check_svc cinder-$service
  done
fi

if test "$ceilometer"; then
  printf "== Ceilometer services ==\n"
  for service in api agent-central agent-compute collector agent-notification; do
    check_svc ceilometer-$service
  done
fi

if test "$heat"; then
  printf "== Heat services ==\n"
  for service in api api-cfn api-cloudwatch engine; do
    check_svc heat-$service
  done
fi

if test "$sahara"; then
  printf "== Sahara services ==\n"
  for service in api; do
    check_svc sahara-$service
  done
fi

if test "$trove"; then
  printf "== Trove services ==\n"
  for service in api taskmanager conductor; do
    check_svc trove-$service
  done
fi

printf "== Support services ==\n"
for svc in $mysql $libvirtd $openvswitch $tgtd $rabbitmq $memcached puppet puppetmaster; do
  check_svc "$svc"
done

if test "$keystone"; then
  printf "== Keystone users ==\n"
  if ! test "$OS_USERNAME"; then
    echo "Warning keystonerc not sourced" >&2
  else
    keystonerc=1
    keystone user-list
  fi
fi

if test "$keystonerc" && test "$glance"; then
  printf "== Glance images ==\n"
  glance image-list
fi

if test "$nova"; then
  if ! test "$keystonerc" && ! test "$NOVA_USERNAME"; then
    test "$keystone" || echo "Warning novarc not sourced" >&2
  else
    printf "== Nova managed services ==\n"
    nova service-list

    printf "== Nova networks ==\n"
    nova network-list

    printf "== Nova instance flavors ==\n"
    # Check direct access
    nova flavor-list

    printf "== Nova instances ==\n"
    # Check access through the API
    nova list # instances
  fi
fi
